syntax = "proto3";
package influxdata.iox.catalog.v1;

import "google/protobuf/timestamp.proto";
import "influxdata/iox/catalog/v1/predicate.proto";

// Path for object store interaction.
message Path {
    // Directory hierarchy.
    repeated string directories = 1;

    // File name.
    string file_name = 2;
}

// Upgrades the catalog to a new version.
message Upgrade {
    // Format string describing the next catalog version.
    string format = 1;
}

// Adds a [Parquet] file to the catalog.
//
// [Parquet]: https://parquet.apache.org/
message AddParquet {
    // Path of the file within the object store.
    Path path = 1;

    // The total size of the parquet file, in bytes
    uint64 file_size_bytes = 3;

    // [Apache Parquet] metadata encoded using [Apache Thrift].
    //
    // The metadata is encoded using the [Thrift Compact Protocol] and compressed using [Zstandard].
    //
    // [Apache Parquet]: https://parquet.apache.org/
    // [Apache Thrift]: https://thrift.apache.org/
    // [Thrift Compact Protocol]: https://github.com/apache/thrift/blob/master/doc/specs/thrift-compact-protocol.md
    // [Zstandard]: http://facebook.github.io/zstd/
    bytes metadata = 2;
}

// Removes a [Parquet] file from the catalog.
//
// [Parquet]: https://parquet.apache.org/
message RemoveParquet {
    // Path of the file within the object store.
    Path path = 1;
}

// Chunk within the preserved part of the catalog.
message ChunkAddr {
  // Table name.
  string table_name = 1;

  // Partition key.
  string partition_key = 2;

  // Was uint32-based chunk ID.
  reserved 3;

  // Chunk ID.
  //
  // UUID is stored as 16 bytes in big-endian order.
  bytes chunk_id = 4;
}

// Register new delete predicate
message DeletePredicate {
  // Predicate to be applied.
  Predicate predicate = 1;

  // Chunks that are affected by the predicate.
  repeated ChunkAddr chunks = 2;
}

// Single, self-contained transaction.
message Transaction {
    // Transaction format version.
    uint32 version = 1;

    // Action as part of the transaction, wraps an enum.
    message Action {
        // Inner enum.
        oneof action {
            Upgrade upgrade = 1;

            AddParquet add_parquet = 2;
            RemoveParquet remove_parquet = 3;

            DeletePredicate delete_predicate = 4;
        }
    }

    // Ordered list of actions that are part of this transaction.
    repeated Action actions = 2;

    // Revision counter, must by "previous revision" + 1 or 0 for the first transaction.
    uint64 revision_counter = 3;

    // Was string-formatted UUID and previous UUID.
    reserved 4, 5;

    // UUID unique to this transaction. Used to detect concurrent transactions. For the first transaction this field is
    // empty.
    //
    // UUID is stored as 16 bytes in big-endian order.
    bytes uuid = 8;

    // UUID of last commit.
    //
    // UUID is stored as 16 bytes in big-endian order.
    bytes previous_uuid = 9;

    // Start timestamp.
    //
    // Timestamp of the start of the transaction.
    google.protobuf.Timestamp start_timestamp = 6;

    // Definition of how this transaction relates to previous transaction and how it should be processed.
    enum Encoding {
        // Unspecified encoding, will lead to an controlled error. Every transaction object MUST decide if the encoding
        // is "delta" or "full".
        ENCODING_UNSPECIFIED = 0;

        // The actions in this message only encode changes to the previous transactions which must be processed
        // beforehand. This is the default for "ordinary" transactions.
        ENCODING_DELTA = 1;

        // The actions in this message contain the full state of the catalog at this point in time. This is used for checkpoints.
        ENCODING_FULL = 2;
    }

    // Definition on how this transaction is encoded.
    Encoding encoding = 7;
}
